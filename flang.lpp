%{
    #include<iostream>
    #include<string>
    #include<flang.tab.h>
    using namespace std;
%}

%option outfile ="flang_lex.cpp"
%option noyywrap
%option yylineno

%x ERROR
%x MCOMMENT

WS      [" ""\t"]+
WORD    [_a-zA-Z][_a-zA-Z0-9]*
ONEOP   [\[\]\{\}<>!+\-*/%;,()=.]
TWOOP   "!="|"=="|"<="|">="|"&&"|"||"
OP      {ONEOP}|{TWOOP}
COMMENT "//".*

%%


    /* Keywords */
"int" {
    col += yyleng;
    return INT;
}

"return" {
    col += yyleng;
    return RETURN;
}

"void" {
    col += yyleng;
    return VOID;
}

    /* misc */

\n {
    col = 1;
}


{WS} {
    col += yyleng;
}

[0-9]+ {
    col += yyleng;
    yylval.ttype = new NumNode(atoi(yytext));
    return NUM;
}

{WORD} {
    col += yyleng;
    yylval.ttype = new IdNode(yytext);
    return ID;
}

\. {
    col += yyleng;
    return DOT;
}

\, {
    col += yyleng;
    return COMMA;
}

\; {
    col += yyleng;
    return SEMICOLON;
}

\= {
    col += yyleng;
    return EQ;
}

    /* Braces */
\( {
    col += yyleng;
    return LPAREN;
}

\) {
    col += yyleng;
    return RPAREN;
}

\[ {
    col += yyleng;
    return LBRACE;
}

\] {
    col += yyleng;
    return RBRACE;
}

\} {
    col += yyleng;
    return RSBRACE;
}

\{ {
    col += yyleng;
    return LSBRACE;
}

    /* Sum/Unary Operators */    
\+ {
    col += yyleng;
    return PLUS;
}

\- {
    col += yyleng;
    return MINUS;
}

    /* Relation Operators */

"==" {
    col += yyleng;
    return EQ;
}
"!=" {
    col += yyleng;
    return NEQ;
}
"<=" {
    col += yyleng;
    return LEQ;
}
">=" {
    col += yyleng;
    return GEQ;
}
"<" {
    col += yyleng;
    return LESS;
}
">" {
    col += yyleng;
    return GREATER;
}

    /* Product Operators */
\* {
    col += yyleng;
    return TIMES;
}
\/ {
    col +=  yyleng;
    return DIV;
}

\% {
    col += yyleng;
    return MOD;
}

    /* Comment handler */
{COMMENT} {
    col += yyleng;
}

"/*" {
    BEGIN(MCOMMENT);
}

<MCOMMENT>[^*\n]* { 
    /* Removes anything not a '*' */
    col += yyleng;
}

<MCOMMENT>"*"+[^*/\n]* {
    /* Removes '*'s no followed by '/'s */
    col += yyleng;
}

<MCOMMENT>"\n" {
    col = 1;
}

<MCOMMENT>"*"+"/" {
    BEGIN(INITIAL);
    col += yyleng;
}

    /* Error Handler */
. {
    yyless(0);
    BEGIN(ERROR);
}

<ERROR>.{OP} {
    /* One character error with op, send op back to parse */
    string s = yytext;
    //printLexicalError(s.substr(0, 1), col, yylineno);
    yyless(1);
    col += yyleng;
    BEGIN(INITIAL);
}

<ERROR>.(^{OP}{WS})+ {
    //printLexicalError(yytext, col, yylineno);
    col += yyleng;
    BEGIN(INITIAL);
}

<ERROR>. {
    //printLexicalError(yytext, col, yylineno);
    col += yyleng;
    BEGIN(INITIAL);
}

%%